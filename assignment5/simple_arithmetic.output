Terminals unused in grammar

    T_PRINT
    T_SIZE
    T_ERROR


Grammar

    0 $accept: start_symbol $end

    1 start_symbol: expr

    2 expr: expr T_MINUS product
    3     | expr T_PLUS product
    4     | product

    5 product: product T_DIVIDE power
    6        | product T_MULTIPLY power
    7        | power

    8 power: nbr T_POWER power
    9      | nbr

   10 nbr: T_INT_CONSTANT


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    T_INT_CONSTANT (258) 10
    T_PLUS (259) 3
    T_MINUS (260) 2
    T_MULTIPLY (261) 6
    T_DIVIDE (262) 5
    T_PRINT (263)
    T_SIZE (264)
    T_ERROR (265)
    T_POWER (266) 8


Nonterminals, with rules where they appear

    $accept (12)
        on left: 0
    start_symbol (13)
        on left: 1
        on right: 0
    expr (14)
        on left: 2 3 4
        on right: 1 2 3
    product (15)
        on left: 5 6 7
        on right: 2 3 4 5 6
    power (16)
        on left: 8 9
        on right: 5 6 7 8
    nbr (17)
        on left: 10
        on right: 8 9


State 0

    0 $accept: . start_symbol $end

    T_INT_CONSTANT  shift, and go to state 1

    start_symbol  go to state 2
    expr          go to state 3
    product       go to state 4
    power         go to state 5
    nbr           go to state 6


State 1

   10 nbr: T_INT_CONSTANT .

    $default  reduce using rule 10 (nbr)


State 2

    0 $accept: start_symbol . $end

    $end  shift, and go to state 7


State 3

    1 start_symbol: expr .
    2 expr: expr . T_MINUS product
    3     | expr . T_PLUS product

    T_PLUS   shift, and go to state 8
    T_MINUS  shift, and go to state 9

    $default  reduce using rule 1 (start_symbol)


State 4

    4 expr: product .
    5 product: product . T_DIVIDE power
    6        | product . T_MULTIPLY power

    T_MULTIPLY  shift, and go to state 10
    T_DIVIDE    shift, and go to state 11

    $default  reduce using rule 4 (expr)


State 5

    7 product: power .

    $default  reduce using rule 7 (product)


State 6

    8 power: nbr . T_POWER power
    9      | nbr .

    T_POWER  shift, and go to state 12

    $default  reduce using rule 9 (power)


State 7

    0 $accept: start_symbol $end .

    $default  accept


State 8

    3 expr: expr T_PLUS . product

    T_INT_CONSTANT  shift, and go to state 1

    product  go to state 13
    power    go to state 5
    nbr      go to state 6


State 9

    2 expr: expr T_MINUS . product

    T_INT_CONSTANT  shift, and go to state 1

    product  go to state 14
    power    go to state 5
    nbr      go to state 6


State 10

    6 product: product T_MULTIPLY . power

    T_INT_CONSTANT  shift, and go to state 1

    power  go to state 15
    nbr    go to state 6


State 11

    5 product: product T_DIVIDE . power

    T_INT_CONSTANT  shift, and go to state 1

    power  go to state 16
    nbr    go to state 6


State 12

    8 power: nbr T_POWER . power

    T_INT_CONSTANT  shift, and go to state 1

    power  go to state 17
    nbr    go to state 6


State 13

    3 expr: expr T_PLUS product .
    5 product: product . T_DIVIDE power
    6        | product . T_MULTIPLY power

    T_MULTIPLY  shift, and go to state 10
    T_DIVIDE    shift, and go to state 11

    $default  reduce using rule 3 (expr)


State 14

    2 expr: expr T_MINUS product .
    5 product: product . T_DIVIDE power
    6        | product . T_MULTIPLY power

    T_MULTIPLY  shift, and go to state 10
    T_DIVIDE    shift, and go to state 11

    $default  reduce using rule 2 (expr)


State 15

    6 product: product T_MULTIPLY power .

    $default  reduce using rule 6 (product)


State 16

    5 product: product T_DIVIDE power .

    $default  reduce using rule 5 (product)


State 17

    8 power: nbr T_POWER power .

    $default  reduce using rule 8 (power)
